---
- hosts: 'all'
  remote_user: 'root'

  vars:
    ruby_version: '2.2.1'
    name: 'app_name'
    user: 'www{{ name }}'
    home: '/home/{{ user }}'
    rbenv_root: '{{ home }}/.rbenv'
    application: '{{ home }}/{{ name }}'
    db_name: '{{name}}_production'
    db_user: '{{user}}'
    db_user_password: 2349sfsdf2374
    db_encoding: utf8

  tasks:
    - name: 'apt | update'
      action: 'apt update_cache=yes'

    - name: 'apt | install dependencies'
      action: 'apt pkg={{ item }}'
      with_items:
        - 'autoconf'
        - 'bison'
        - 'build-essential'
        - 'libssl-dev'
        - 'libyaml-dev'
        - 'libreadline6-dev'
        - 'libncurses5-dev'
        - 'libmagickwand-dev'
        - 'libcurl4-openssl-dev'
        - 'libffi-dev'
        - 'libgdbm3'
        - 'libgdbm-dev'
        - 'zlib1g-dev'
        - 'git'
        - 'nginx'
        - 'redis-server'
        - 'postgresql'
        - 'postgresql-contrib'
        - 'python-psycopg2'
        - 'libpq-dev'
        - 'imagemagick'
        - 'nodejs'
        - 'htop'

    - name: 'account | create'
      user: 'name={{ user }} shell=/bin/bash'

    - name: 'account | copy authorized keys'
      shell: 'mkdir -p {{ home }}/.ssh -m 700 && cp /root/.ssh/authorized_keys {{ home }}/.ssh && chown -R {{ user }}:{{ user }} {{ home }}/.ssh'

    ### Install ruby ###
    - name: 'rbenv | clone repo'
      git: 'repo=git://github.com/sstephenson/rbenv.git dest={{ rbenv_root }} accept_hostkey=yes'

    - name: 'rbenv | check ruby-build installed'
      command: 'test -x {{ rbenv_root }}/plugins/ruby-build'
      register: 'plugin_installed'
      ignore_errors: yes

    - name: 'rbenv | add bin to path'
      shell: echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> {{ home }}/.bashrc
      when: 'plugin_installed|failed'

    - name: 'rbenv | init'
      shell: echo 'eval "$(rbenv init -)"' >> {{ home }}/.bashrc
      when: 'plugin_installed|failed'

    - name: 'rbenv | clone ruby-build repo'
      git: 'repo=git://github.com/sstephenson/ruby-build.git dest={{ rbenv_root }}/plugins/ruby-build accept_hostkey=yes'
      when: 'plugin_installed|failed'

    - name: 'rbenv | check ruby {{ ruby_version }} installed'
      shell: 'RBENV_ROOT={{ rbenv_root }} PATH="$RBENV_ROOT/bin:$PATH" rbenv versions | grep {{ ruby_version }}'
      register: 'ruby_installed'
      ignore_errors: yes

    - name: 'rbenv | install ruby {{ ruby_version }}'
      shell: 'RBENV_ROOT={{ rbenv_root }} PATH="$RBENV_ROOT/bin:$PATH" rbenv install {{ ruby_version }}'
      when: 'ruby_installed|failed'

    - name: 'rbenv | set global ruby {{ ruby_version }}'
      shell: 'RBENV_ROOT={{ rbenv_root }} PATH="$RBENV_ROOT/bin:$PATH" rbenv global {{ ruby_version }}'
      when: 'ruby_installed|failed'

    - name: 'rbenv | rehash'
      shell: 'RBENV_ROOT={{ rbenv_root }} PATH="$RBENV_ROOT/bin:$PATH" rbenv rehash'
      when: 'ruby_installed|failed'

    - name: 'rbenv | create .gemrc'
      lineinfile: 'dest={{ home }}/.gemrc owner={{ user }} group={{ user }} mode=0644 line="gem: --no-ri --no-rdoc" create=yes'
      when: 'ruby_installed|failed'

    - name: 'ruby | install bundler'
      shell: 'RBENV_ROOT={{ rbenv_root }} PATH="$RBENV_ROOT/bin:$PATH" rbenv exec gem install bundler'
      when: 'ruby_installed|failed'

    - name: 'rbenv | change owner'
      shell: 'chown -R {{ user }}:{{ user }} {{ rbenv_root }}'
      when: 'ruby_installed|failed'

    ### Manage database ###
    - name: Restart PostgreSQL
      command: service postgresql restart

    - name: create the postgresql user for application
      postgresql_user: name={{ db_user }} password={{ db_user_password }} role_attr_flags=NOSUPERUSER
      sudo: yes
      sudo_user: postgres

    - name: create the postgresql database for application
      postgresql_db: name={{ db_name }} owner={{ db_user }} encoding={{ db_encoding }} state=present
      sudo: yes
      sudo_user: postgres

    - name: 'postgresql | copy database.yml'
      template: 'src=configs/database.yml dest={{ application }}/shared/config/database.yml owner={{ user }} group={{ user }} mode=0644'

#    # Rails setup
#    - name: 'rails | copy settings.yml'
#      copy: 'src=configs/settings.yml dest={{ application }}/shared/config/settings.yml owner={{ user }} group={{ user }} mode=0644'

    ### Setup nginx ###
    - name: 'nginx | check config'
      command: 'test -f /etc/nginx/sites-enabled/{{ name }}.conf'
      register: 'nginx_config_copied'
      ignore_errors: yes

    - name: 'nginx | createdir'
      shell: 'rm /etc/nginx/sites-enabled/default; mkdir -p etc/nginx/sites-enabled/'
      when: 'nginx_config_copied|failed'

    - name: 'nginx | copy config'
      template: 'src=configs/nginx.conf dest=/etc/nginx/sites-enabled/{{ name }}.conf owner=root group=root mode=0644'
      when: 'nginx_config_copied|failed'

    - name: 'nginx | restart service'
      service: name=nginx state=restarted
      when: 'nginx_config_copied|failed'